#
# Default PF configuration file.
#
# This file contains the main ruleset, which gets automatically loaded
# at startup.  PF will not be automatically enabled, however.  Instead,
# each component which utilizes PF is responsible for enabling and disabling
# PF via -E and -X as documented in pfctl(8).  That will ensure that PF
# is disabled only when the last enable reference is released.
#
# Care must be taken to ensure that the main ruleset does not get flushed,
# as the nested anchors rely on the anchor point defined here. In addition,
# to the anchors loaded by this file, some system services would dynamically 
# insert anchors into the main ruleset. These anchors will be added only when
# the system service is used and would removed on termination of the service.
#
# See pf.conf(5) for syntax.
#

tcpstate = "keep state"
udpstate = "keep state"


# Destination Unreach, packet too big, echo request (ping6), echo response

icmp6_types="{ 1, 2, 128, 129 }" 
# Neighbor Discovery Protocol (NDP) (types 133-137):
#   Router Solicitation (RS), Router Advertisement (RA)
#   Neighbor Solicitation (NS), Neighbor Advertisement (NA)
#   Route Redirection
icmp6_types_ext_if="{ 130, 131, 132, 133, 134, 135, 136, 137, 141, 142, 143, 148, 149, 151, 152, 153 }"

table <blocklist> persist

set block-policy drop
set fingerprints "/etc/pf.os"
set ruleset-optimization basic
set skip on lo0
set state-policy if-bound

set optimization normal

scrub in all no-df


block log all

block in log quick from no-route to any
block log from <blocklist> to any
block log from any to <blocklist>
pass out log quick on { en0, en4 } proto udp from { (en0),(en4) } to 10.13.0.1 port 53
block drop log quick on !lo0 proto udp from any to any port = 53
block drop log quick on !lo0 proto tcp from any to any port = 53


pass out log proto tcp from { (en0), (en4), (ppp0) } to any $tcpstate
pass out log proto { udp, icmp, esp } from { (en0), (en4), (ppp0) } to any $udpstate

pass in log on { en0, en4 } proto udp from any port 68 to any port 67 $udpstate
pass in log on { en0, en4 } proto udp from any port 67 to any port 68 $udpstate

# IPv6
pass in on { en0, en4, ppp0 } inet6 proto ipv6-icmp icmp6-type $icmp6_types $udpstate
pass in on { en0, en4, ppp0 } inet6 proto ipv6-icmp from any to { (en0), (en4), (ppp0) , ff02::1/16 } icmp6-type $icmp6_types_ext_if $udpstate
pass out on { en0, en4, ppp0 } inet6 proto ipv6-icmp from { (en0), (en4), (ppp0) } to { ff02::1/16, fe80::/10, (en0:network), (en4:network), (ppp0:network) } icmp6-type $icmp6_types_ext_if $udpstate

# RIPing
pass in on { en0, en4, ppp0 } inet6 proto udp from any to { ff02::1/16 } port 521 $udpstate
# Time Exceeded (Type 3) - Code 0 only
pass in on { en0, en4, ppp0 } inet6 proto ipv6-icmp icmp6-type 3 code 0 $udpstate
# Parameter Problem (Type 4) - Codes 1 and 2 only
pass in on { en0, en4, ppp0 } inet6 proto ipv6-icmp icmp6-type 4 code 1 $udpstate
pass in on { en0, en4, ppp0 } inet6 proto ipv6-icmp icmp6-type 4 code 2 $udpstate


#
# com.apple anchor point
#
#scrub-anchor "com.apple/*"
#nat-anchor "com.apple/*"
#rdr-anchor "com.apple/*"
dummynet-anchor "com.apple/*"
anchor "com.apple/*"
load anchor "com.apple" from "/etc/pf.anchors/com.apple"
